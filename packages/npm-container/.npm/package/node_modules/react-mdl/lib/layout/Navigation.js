'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utilsCloneChildren = require('../utils/cloneChildren');

var _utilsCloneChildren2 = _interopRequireDefault(_utilsCloneChildren);

var Navigation = (function (_React$Component) {
    _inherits(Navigation, _React$Component);

    function Navigation() {
        _classCallCheck(this, Navigation);

        _React$Component.apply(this, arguments);
    }

    Navigation.prototype.render = function render() {
        return _react2['default'].createElement(
            'nav',
            { className: 'mdl-navigation' },
            _utilsCloneChildren2['default'](this.props.children, function (child) {
                return {
                    className: _classnames2['default']('mdl-navigation__link', child.props.className)
                };
            })
        );
    };

    return Navigation;
})(_react2['default'].Component);

exports['default'] = Navigation;
module.exports = exports['default'];